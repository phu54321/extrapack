function getTilePos(x, y) {
    const x0 = 768 + (x - 1) * 64;
    const y0 = 768 + (y - 1) * 64;
    return x0, y0;
}

function mloc_px(locid, x0, y0, size) {
    if(size >= 0x80000000) {
        size = -(-size / 2);
    }
    else {
        size /= 2;
    }
    SetMemory(0x58DC60 + 20 * locid + 0x00, SetTo, x0 - size);
    SetMemory(0x58DC60 + 20 * locid + 0x04, SetTo, y0 - size);
    SetMemory(0x58DC60 + 20 * locid + 0x08, SetTo, x0 + size);
    SetMemory(0x58DC60 + 20 * locid + 0x0C, SetTo, y0 + size);
}

function mloc_tile(locid, x, y, size) {
    const x0, y0 = getTilePos(x, y);
    mloc_px(locid, x0, y0, size);
}


/**
 * (x, y)에서 (dx, dy) 방향으로 뻣어나가는 반직선과 맵 테두리의 교점을 구합니다.
 */
function getInfiniteVectorEnd(x, y, dx, dy) {
    const mapSize = 32 * 64;

    // Get time to arrive at the vertical edge of the map
    var timeX, timeY;
    if(dx >= 0x80000000) timeX = 2048 * x / -dx;
    else timeX = 2048 * (mapSize - x) / dx;
    if(dy >= 0x80000000) timeY = 2048 * y / -dy;
    else timeY = 2048 * (mapSize - y) / dy;

    // Get time for the missile to get to the edge
    var time;  // min(timeX, timeY)
    if(dx == 0) time = timeY;
    else if(dy == 0) time = timeX;
    else if(timeX <= timeY) time = timeX;
    else time = timeY;

    // Calculate final position
    var dstx, dsty;
    if(dx >= 0x80000000) dstx = x - (-dx * time / 2048);
    else dstx = x + (dx * time / 2048);
    if(dy >= 0x80000000) dsty = y - (-dy * time / 2048);
    else dsty = y + (dy * time / 2048);
    return dstx, dsty;  // 여러개 값 반환도 되요!
}
