## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 3) import stages.ep_commonlib as cl;
from stages import ep_commonlib as cl
# (Line 5) var angle = 0;
angle = EUDCreateVariables(1)
_IGVA([angle], lambda: [0])
# (Line 6) var t = 0;
t = EUDCreateVariables(1)
_IGVA([t], lambda: [0])
# (Line 7) const dt = 1;
dt = _CGFW(lambda: [1], 1)[0]
# (Line 9) var subt = 0;
subt = EUDCreateVariables(1)
_IGVA([subt], lambda: [0])
# (Line 11) function pattern() {
@EUDFunc
def f_pattern():
    # (Line 12) subt++;
    subt.__iadd__(1)
    # (Line 13) if(subt == 2) {
    if EUDIf()(subt == 2):
        # (Line 14) subt = 0;
        subt << (0)
        # (Line 16) const cx, cy = cl.getTilePos(2, 2);
        cx, cy = List2Assignable([cl.f_getTilePos(2, 2)])
        # (Line 17) for(var i = 0 ; i < 4 ; i++) {
        i = EUDVariable()
        i << (0)
        if EUDWhile()(i >= 4, neg=True):
            def _t3():
                i.__iadd__(1)
            # (Line 18) const a = angle + i * 90;
            a = angle + i * 90
            # (Line 19) const cdx, cdy = lengthdir(50, a);
            cdx, cdy = List2Assignable([f_lengthdir(50, a)])
            # (Line 20) cl.mloc_px($L('cloc1'), cdx + cx, cdy + cy, -22);
            cl.f_mloc_px(GetLocationIndex('cloc1'), cdx + cx, cdy + cy, -22)
            # (Line 21) const dx1, dy1 = lengthdir(600, a);
            dx1, dy1 = List2Assignable([f_lengthdir(600, a)])
            # (Line 22) const ddx, ddy = cl.getInfiniteVectorEnd(cx, cy, dx1, dy1);
            ddx, ddy = List2Assignable([cl.f_getInfiniteVectorEnd(cx, cy, dx1, dy1)])
            # (Line 23) cl.mloc_px($L('cloc2'), ddx, ddy, 0);
            cl.f_mloc_px(GetLocationIndex('cloc2'), ddx, ddy, 0)
            # (Line 24) CreateUnit(1, 'Small Missile', 'cloc1', P7);
            DoActions(CreateUnit(1, 'Small Missile', 'cloc1', P7))
            # (Line 25) Order('Small Missile', P7, 'cloc1', Move, 'cloc2');
            DoActions(Order('Small Missile', P7, 'cloc1', Move, 'cloc2'))
            # (Line 26) }
            # (Line 27) cl.mloc_px($L('cloc1'), cx, cy, 0);
            EUDSetContinuePoint()
            _t3()
        EUDEndWhile()
        cl.f_mloc_px(GetLocationIndex('cloc1'), cx, cy, 0)
        # (Line 28) CreateUnit(1, "Flare", 'cloc1', P7);
        DoActions(CreateUnit(1, "Flare", 'cloc1', P7))
        # (Line 29) KillUnitAt(All, 'Flare', 'Anywhere', P7);
        DoActions(KillUnitAt(All, 'Flare', 'Anywhere', P7))
        # (Line 31) KillUnitAt(All, 'Small Missile', 'u', P7);
        DoActions(KillUnitAt(All, 'Small Missile', 'u', P7))
        # (Line 32) KillUnitAt(All, 'Small Missile', 'l', P7);
        DoActions(KillUnitAt(All, 'Small Missile', 'l', P7))
        # (Line 33) KillUnitAt(All, 'Small Missile', 'd', P7);
        DoActions(KillUnitAt(All, 'Small Missile', 'd', P7))
        # (Line 34) KillUnitAt(All, 'Small Missile', 'r', P7);
        DoActions(KillUnitAt(All, 'Small Missile', 'r', P7))
        # (Line 36) angle = (angle + t) % 360;
        angle << ((angle + t) % 360)
        # (Line 37) t += dt;
        t.__iadd__(dt)
        # (Line 38) if (t >= 360) t -= 360;
        if EUDIf()(t >= 360):
            t.__isub__(360)
            # (Line 39) }
        EUDEndIf()
        # (Line 40) }
    EUDEndIf()
