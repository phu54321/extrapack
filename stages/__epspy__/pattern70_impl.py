## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName
    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

class _ARRW:
     def __init__(self, obj, index):
         self.obj = obj
         self.index = index
     def __lshift__(self, r):
         self.obj[self.index] = r

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import stages.ep_commonlib as cl;
from stages import ep_commonlib as cl
# (Line 3) var iflag = 0;
iflag = EUDCreateVariables(1)
_IGVA([iflag], lambda: [0])
# (Line 4) var t = 0;
t = EUDCreateVariables(1)
_IGVA([t], lambda: [0])
# (Line 5) const dt = 18;
dt = _CGFW(lambda: [18], 1)[0]
# (Line 7) function pattern70() {
@EUDFunc
def f_pattern70():
    # (Line 8) if (iflag == 0) {
    if EUDIf()(iflag == 0):
        # (Line 9) CreateUnit(25, "Recaller", "arbiter", P8);
        # (Line 11) CreateUnit(1, "Small Slow Heavy Missile", "u3", P8);
        # (Line 12) CreateUnit(1, "Small Slow Heavy Missile", "u4", P8);
        # (Line 13) CreateUnit(1, "Small Slow Heavy Missile", "u5", P8);
        # (Line 14) CreateUnit(1, "Small Slow Heavy Missile", "u6", P8);
        # (Line 15) CreateUnit(1, "Small Slow Heavy Missile", "u7", P8);
        # (Line 16) Order("(men)", P8, "u3", Move, "d3");
        # (Line 17) Order("(men)", P8, "u4", Move, "d4");
        # (Line 18) Order("(men)", P8, "u5", Move, "d5");
        # (Line 19) Order("(men)", P8, "u6", Move, "d6");
        # (Line 20) Order("(men)", P8, "u7", Move, "d7");
        # (Line 21) iflag = 1;
        DoActions([
            CreateUnit(25, "Recaller", "arbiter", P8),
            CreateUnit(1, "Small Slow Heavy Missile", "u3", P8),
            CreateUnit(1, "Small Slow Heavy Missile", "u4", P8),
            CreateUnit(1, "Small Slow Heavy Missile", "u5", P8),
            CreateUnit(1, "Small Slow Heavy Missile", "u6", P8),
            CreateUnit(1, "Small Slow Heavy Missile", "u7", P8),
            Order("(men)", P8, "u3", Move, "d3"),
            Order("(men)", P8, "u4", Move, "d4"),
            Order("(men)", P8, "u5", Move, "d5"),
            Order("(men)", P8, "u6", Move, "d6"),
            Order("(men)", P8, "u7", Move, "d7")
        ])
        iflag << (1)
        # (Line 22) }
        # (Line 24) KillUnitAt(All, '(men)', 'u', P7);
    EUDEndIf()
    # (Line 25) KillUnitAt(All, '(men)', 'd', P7);
    # (Line 26) KillUnitAt(All, '(men)', 'l', P7);
    # (Line 27) KillUnitAt(All, '(men)', 'r', P7);
    # (Line 28) KillUnitAt(All, '(men)', 'd', P8);
    # (Line 30) if(t == 1) {
    DoActions([
        KillUnitAt(All, '(men)', 'u', P7),
        KillUnitAt(All, '(men)', 'd', P7),
        KillUnitAt(All, '(men)', 'l', P7),
        KillUnitAt(All, '(men)', 'r', P7),
        KillUnitAt(All, '(men)', 'd', P8)
    ])
    if EUDIf()(t == 1):
        # (Line 31) for(var i = 0 ; i < 2 ; i++) {
        i = EUDVariable()
        i << (0)
        if EUDWhile()(i < 2):
            def _t20():
                i.__iadd__(1)
            # (Line 32) for(var j = 0 ; j < 5 ; j++) {
            j = EUDVariable()
            j << (0)
            if EUDWhile()(j < 5):
                def _t22():
                    j.__iadd__(1)
                # (Line 33) const x, y = 1 + i * 8, 1 + j * 2;
                x, y = List2Assignable([1 + i * 8, 1 + j * 2])
                # (Line 34) cl.mloc_tile($L('cloc1'), x, y, 0);
                # (Line 35) RunAIScriptAt('Recall Here', 'cloc1');
                cl.f_mloc_tile(GetLocationIndex('cloc1'), x, y, 0)
                # (Line 36) }
                DoActions(RunAIScriptAt('Recall Here', 'cloc1'))
                # (Line 37) }
                EUDSetContinuePoint()
                _t22()
            EUDEndWhile()
            # (Line 38) }
            EUDSetContinuePoint()
            _t20()
        EUDEndWhile()
        # (Line 39) else if(t == dt) {
    if EUDElseIf()(t == dt):
        # (Line 40) t = 0;
        t << (0)
        # (Line 41) for(var i = 0 ; i < 2 ; i++) {
        i = EUDVariable()
        i << (0)
        if EUDWhile()(i < 2):
            def _t26():
                i.__iadd__(1)
            # (Line 42) for(var j = 0 ; j < 5 ; j++) {
            j = EUDVariable()
            j << (0)
            if EUDWhile()(j < 5):
                def _t28():
                    j.__iadd__(1)
                # (Line 43) const x, y = 1 + i * 8, 1 + j * 2;
                x, y = List2Assignable([1 + i * 8, 1 + j * 2])
                # (Line 44) cl.mloc_tile($L('cloc1'), x, y, -16);
                # (Line 45) CreateUnit(1, "Small Slow Missile", "cloc1", P7);
                cl.f_mloc_tile(GetLocationIndex('cloc1'), x, y, -16)
                # (Line 46) const px, py = cl.getTilePos(x, y);
                DoActions(CreateUnit(1, "Small Slow Missile", "cloc1", P7))
                px, py = List2Assignable([cl.f_getTilePos(x, y)])
                # (Line 47) const angle = rand() % 360;
                angle = f_rand() % 360
                # (Line 48) const dx, dy = lengthdir(800, angle);
                dx, dy = List2Assignable([f_lengthdir(800, angle)])
                # (Line 49) const dpx, dpy = cl.getInfiniteVectorEnd(px, py, dx, dy);
                dpx, dpy = List2Assignable([cl.f_getInfiniteVectorEnd(px, py, dx, dy)])
                # (Line 50) cl.mloc_px($L('cloc2'), dpx, dpy, 0);
                # (Line 51) Order('(men)', P7, 'cloc1', Move, 'cloc2');
                cl.f_mloc_px(GetLocationIndex('cloc2'), dpx, dpy, 0)
                # (Line 52) }
                DoActions(Order('(men)', P7, 'cloc1', Move, 'cloc2'))
                # (Line 53) }
                EUDSetContinuePoint()
                _t28()
            EUDEndWhile()
            # (Line 54) }
            EUDSetContinuePoint()
            _t26()
        EUDEndWhile()
        # (Line 55) t++;
    EUDEndIf()
    t.__iadd__(1)
    # (Line 56) }
