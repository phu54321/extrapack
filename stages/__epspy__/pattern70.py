## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName
    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

class _ARRW:
     def __init__(self, obj, index):
         self.obj = obj
         self.index = index
     def __lshift__(self, r):
         self.obj[self.index] = r

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import stages.ep_commonlib as cl;
from stages import ep_commonlib as cl
# (Line 3) var iflag = 0;
iflag = EUDCreateVariables(1)
_IGVA([iflag], lambda: [0])
# (Line 4) const mUnit = $U("Small Slow Missile");
mUnit = _CGFW(lambda: [EncodeUnit("Small Slow Missile")], 1)[0]
# (Line 6) var t = 0;
t = EUDCreateVariables(1)
_IGVA([t], lambda: [0])
# (Line 7) const loopt = 13;
loopt = _CGFW(lambda: [13], 1)[0]
# (Line 9) var gangle = 0;
gangle = EUDCreateVariables(1)
_IGVA([gangle], lambda: [0])
# (Line 10) const dangle = 18;
dangle = _CGFW(lambda: [18], 1)[0]
# (Line 12) function pattern() {
@EUDFunc
def f_pattern():
    # (Line 13) if (iflag == 0) {
    if EUDIf()(iflag == 0):
        # (Line 14) CreateUnit(25, "Recaller", "arbiter", P8);
        # (Line 16) CreateUnit(1, "Small Slow Heavy Missile", "u3", P8);
        # (Line 17) CreateUnit(1, "Small Slow Heavy Missile", "u4", P8);
        # (Line 18) CreateUnit(1, "Small Slow Heavy Missile", "u5", P8);
        # (Line 19) CreateUnit(1, "Small Slow Heavy Missile", "u6", P8);
        # (Line 20) CreateUnit(1, "Small Slow Heavy Missile", "u7", P8);
        # (Line 21) Order("(men)", P8, "u3", Move, "d3");
        # (Line 22) Order("(men)", P8, "u4", Move, "d4");
        # (Line 23) Order("(men)", P8, "u5", Move, "d5");
        # (Line 24) Order("(men)", P8, "u6", Move, "d6");
        # (Line 25) Order("(men)", P8, "u7", Move, "d7");
        # (Line 26) iflag = 1;
        DoActions([
            CreateUnit(25, "Recaller", "arbiter", P8),
            CreateUnit(1, "Small Slow Heavy Missile", "u3", P8),
            CreateUnit(1, "Small Slow Heavy Missile", "u4", P8),
            CreateUnit(1, "Small Slow Heavy Missile", "u5", P8),
            CreateUnit(1, "Small Slow Heavy Missile", "u6", P8),
            CreateUnit(1, "Small Slow Heavy Missile", "u7", P8),
            Order("(men)", P8, "u3", Move, "d3"),
            Order("(men)", P8, "u4", Move, "d4"),
            Order("(men)", P8, "u5", Move, "d5"),
            Order("(men)", P8, "u6", Move, "d6"),
            Order("(men)", P8, "u7", Move, "d7")
        ])
        iflag << (1)
        # (Line 27) }
        # (Line 29) KillUnitAt(All, mUnit, 'u', Force2);
    EUDEndIf()
    # (Line 30) KillUnitAt(All, mUnit, 'd', Force2);
    # (Line 31) KillUnitAt(All, mUnit, 'l', Force2);
    # (Line 32) KillUnitAt(All, mUnit, 'r', Force2);
    # (Line 33) KillUnitAt(All, '(men)', 'd', P8);
    # (Line 35) if(t == 1) {
    DoActions([
        KillUnitAt(All, mUnit, 'u', Force2),
        KillUnitAt(All, mUnit, 'd', Force2),
        KillUnitAt(All, mUnit, 'l', Force2),
        KillUnitAt(All, mUnit, 'r', Force2),
        KillUnitAt(All, '(men)', 'd', P8)
    ])
    if EUDIf()(t == 1):
        # (Line 36) for(var i = 0 ; i < 2 ; i++) {
        i = EUDVariable()
        i << (0)
        if EUDWhile()(i < 2):
            def _t20():
                i.__iadd__(1)
            # (Line 37) for(var j = 0 ; j < 5 ; j++) {
            j = EUDVariable()
            j << (0)
            if EUDWhile()(j < 5):
                def _t22():
                    j.__iadd__(1)
                # (Line 38) const x, y = 1 + i * 8, 1 + j * 2;
                x, y = List2Assignable([1 + i * 8, 1 + j * 2])
                # (Line 39) cl.mloc_tile($L('cloc1'), x, y, 0);
                # (Line 40) RunAIScriptAt('Recall Here', 'cloc1');
                cl.f_mloc_tile(GetLocationIndex('cloc1'), x, y, 0)
                # (Line 41) }
                DoActions(RunAIScriptAt('Recall Here', 'cloc1'))
                # (Line 42) }
                EUDSetContinuePoint()
                _t22()
            EUDEndWhile()
            # (Line 43) }
            EUDSetContinuePoint()
            _t20()
        EUDEndWhile()
        # (Line 44) else if(t == loopt) {
    if EUDElseIf()(t == loopt):
        # (Line 45) t = 0;
        t << (0)
        # (Line 46) for(var i = 0 ; i < 2 ; i++) {
        i = EUDVariable()
        i << (0)
        if EUDWhile()(i < 2):
            def _t26():
                i.__iadd__(1)
            # (Line 47) for(var j = 0 ; j < 5 ; j++) {
            j = EUDVariable()
            j << (0)
            if EUDWhile()(j < 5):
                def _t28():
                    j.__iadd__(1)
                # (Line 48) const x, y = 1 + i * 8, 1 + j * 2;
                x, y = List2Assignable([1 + i * 8, 1 + j * 2])
                # (Line 49) cl.mloc_tile($L('cloc1'), x, y, -40);
                # (Line 50) CreateUnit(1, mUnit, "cloc1", P7);
                cl.f_mloc_tile(GetLocationIndex('cloc1'), x, y, -40)
                # (Line 51) const px, py = cl.getTilePos(x, y);
                DoActions(CreateUnit(1, mUnit, "cloc1", P7))
                px, py = List2Assignable([cl.f_getTilePos(x, y)])
                # (Line 52) const angle = gangle + (36 * 3) * (i + j * 2);
                angle = gangle + (36 * 3) * (i + j * 2)
                # (Line 53) const dx, dy = lengthdir(800, angle);
                dx, dy = List2Assignable([f_lengthdir(800, angle)])
                # (Line 54) const dpx, dpy = cl.getInfiniteVectorEnd(px, py, dx, dy);
                dpx, dpy = List2Assignable([cl.f_getInfiniteVectorEnd(px, py, dx, dy)])
                # (Line 55) cl.mloc_px($L('cloc2'), dpx, dpy, 0);
                # (Line 56) Order(mUnit, P7, 'cloc1', Move, 'cloc2');
                cl.f_mloc_px(GetLocationIndex('cloc2'), dpx, dpy, 0)
                # (Line 57) }
                DoActions(Order(mUnit, P7, 'cloc1', Move, 'cloc2'))
                # (Line 58) }
                EUDSetContinuePoint()
                _t28()
            EUDEndWhile()
            # (Line 60) gangle += dangle;
            EUDSetContinuePoint()
            _t26()
        EUDEndWhile()
        gangle.__iadd__(dangle)
        # (Line 61) if(gangle >= 360) gangle -= 360;
        if EUDIf()(gangle >= 360):
            gangle.__isub__(360)
            # (Line 62) }
        EUDEndIf()
        # (Line 63) t++;
    EUDEndIf()
    t.__iadd__(1)
    # (Line 64) }
