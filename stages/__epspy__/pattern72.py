## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __idiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov / v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
     def __init__(self, obj, index):
         self.obj = obj
         self.index = index
     def __lshift__(self, r):
         self.obj[self.index] = r

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import stages.ep_commonlib as cl;
from stages import ep_commonlib as cl
# (Line 3) var t = 0;
t = EUDCreateVariables(1)
_IGVA([t], lambda: [0])
# (Line 4) const dt = 8;
dt = _CGFW(lambda: [8], 1)[0]
# (Line 6) function sendRow(unit: TrgUnit) {
@EUDTypedFunc([TrgUnit])
def f_sendRow(unit):
    # (Line 7) CreateUnit(1, unit, "u1", P7);
    DoActions(CreateUnit(1, unit, "u1", P7))
    # (Line 8) CreateUnit(1, unit, "u2", P7);
    DoActions(CreateUnit(1, unit, "u2", P7))
    # (Line 9) CreateUnit(1, unit, "u3", P7);
    DoActions(CreateUnit(1, unit, "u3", P7))
    # (Line 10) CreateUnit(1, unit, "u4", P7);
    DoActions(CreateUnit(1, unit, "u4", P7))
    # (Line 11) CreateUnit(1, unit, "u5", P7);
    DoActions(CreateUnit(1, unit, "u5", P7))
    # (Line 12) CreateUnit(1, unit, "u6", P7);
    DoActions(CreateUnit(1, unit, "u6", P7))
    # (Line 13) CreateUnit(1, unit, "u7", P7);
    DoActions(CreateUnit(1, unit, "u7", P7))
    # (Line 14) CreateUnit(1, unit, "u8", P7);
    DoActions(CreateUnit(1, unit, "u8", P7))
    # (Line 15) CreateUnit(1, unit, "u9", P7);
    DoActions(CreateUnit(1, unit, "u9", P7))
    # (Line 17) }
    # (Line 18) function pattern() {

@EUDFunc
def f_pattern():
    # (Line 19) once {
    if EUDExecuteOnce()():
        # (Line 20) sendRow('Heavy Missile');
        f_sendRow('Heavy Missile')
        # (Line 21) SetSwitch('NormalMissileMove', Set);
        DoActions(SetSwitch('NormalMissileMove', Set))
        # (Line 22) }
        # (Line 24) foreach(ptr, epd : EUDLoopUnit()) {
    EUDEndExecuteOnce()
    for ptr, epd in EUDLoopUnit():
        # (Line 25) const unitType = wread_epd(epd + 0x64 / 4, 0);
        unitType = f_wread_epd(epd + 0x64 // 4, 0)
        # (Line 26) if(unitType == $U('Fast Missile')) {
        if EUDIf()(unitType == EncodeUnit('Fast Missile')):
            # (Line 27) const posX, posY = dwbreak(dwread_epd(epd + 0x28 / 4))[[0, 1]];
            posX, posY = List2Assignable([_SRET(f_dwbreak(f_dwread_epd(epd + 0x28 // 4)), [0, 1])])
            # (Line 28) cl.mloc_px($L('cloc1'), posX, posY, 100);
            cl.f_mloc_px(GetLocationIndex('cloc1'), posX, posY, 100)
            # (Line 29) MoveLocation('cloc1', 'Map Revealer', P12, 'cloc1');
            DoActions(MoveLocation('cloc1', 'Map Revealer', P12, 'cloc1'))
            # (Line 30) const topSpeed =
            # (Line 31) Bring(Force1, AtLeast, 1, 'Dodger', 'cloc1')
            # (Line 32) ? 30 : 1800;
            topSpeed = EUDTernary(Bring(Force1, AtLeast, 1, 'Dodger', 'cloc1'))(30)(1800)
            # (Line 33) SetMemoryEPD(epd + 0x34 / 4, SetTo, topSpeed);
            DoActions(SetMemoryEPD(epd + 0x34 // 4, SetTo, topSpeed))
            # (Line 34) }
            # (Line 35) }
        EUDEndIf()
        # (Line 36) KillUnit('Protoss Shuttle', P7);

    DoActions(KillUnit('Protoss Shuttle', P7))
    # (Line 37) KillUnit('Protoss Observer', P7);
    DoActions(KillUnit('Protoss Observer', P7))
    # (Line 39) t++;
    t.__iadd__(1)
    # (Line 41) if(t == dt * 1) CreateUnit(1, 'Fast Missile', 'r1', P8);
    if EUDIf()(t == dt * 1):
        DoActions(CreateUnit(1, 'Fast Missile', 'r1', P8))
        # (Line 42) if(t == dt * 2) CreateUnit(1, 'Fast Missile', 'r2', P8);
    EUDEndIf()
    if EUDIf()(t == dt * 2):
        DoActions(CreateUnit(1, 'Fast Missile', 'r2', P8))
        # (Line 43) if(t == dt * 3) CreateUnit(1, 'Fast Missile', 'r3', P8);
    EUDEndIf()
    if EUDIf()(t == dt * 3):
        DoActions(CreateUnit(1, 'Fast Missile', 'r3', P8))
        # (Line 44) if(t == dt * 4) CreateUnit(1, 'Fast Missile', 'r4', P8);
    EUDEndIf()
    if EUDIf()(t == dt * 4):
        DoActions(CreateUnit(1, 'Fast Missile', 'r4', P8))
        # (Line 45) if(t == dt * 5) CreateUnit(1, 'Fast Missile', 'r5', P8);
    EUDEndIf()
    if EUDIf()(t == dt * 5):
        DoActions(CreateUnit(1, 'Fast Missile', 'r5', P8))
        # (Line 46) if(t == dt * 6) CreateUnit(1, 'Fast Missile', 'r6', P8);
    EUDEndIf()
    if EUDIf()(t == dt * 6):
        DoActions(CreateUnit(1, 'Fast Missile', 'r6', P8))
        # (Line 47) if(t == dt * 7) CreateUnit(1, 'Fast Missile', 'r7', P8);
    EUDEndIf()
    if EUDIf()(t == dt * 7):
        DoActions(CreateUnit(1, 'Fast Missile', 'r7', P8))
        # (Line 48) if(t == dt * 8) CreateUnit(1, 'Fast Missile', 'r8', P8);
    EUDEndIf()
    if EUDIf()(t == dt * 8):
        DoActions(CreateUnit(1, 'Fast Missile', 'r8', P8))
        # (Line 49) if(t == dt * 9) CreateUnit(1, 'Fast Missile', 'r9', P8);
    EUDEndIf()
    if EUDIf()(t == dt * 9):
        DoActions(CreateUnit(1, 'Fast Missile', 'r9', P8))
        # (Line 51) if(t == dt * 9) {
    EUDEndIf()
    if EUDIf()(t == dt * 9):
        # (Line 52) t = 0;
        t << (0)
        # (Line 53) sendRow('Fast Missile');
        f_sendRow('Fast Missile')
        # (Line 54) }
        # (Line 55) }
    EUDEndIf()
